package tests

import (
	"fmt"
	"log"
	"net/http"

	// "net/url"
	"bytes"
	"encoding/json"
	"io/ioutil"
	"testing"

	"github.com/ozontech/allure-go/pkg/allure"
	"github.com/ozontech/allure-go/pkg/framework/provider"
	"github.com/ozontech/allure-go/pkg/framework/runner"
	"github.com/stretchr/testify/assert"
)

const baseurl string = "http://localhost:8080"

type Device struct {
	DeviceID string `json:"deviceId"`
	UserId   string `json:"userId"`
	Platform string `json:"platform"`
}

type AutoGenerated struct {
	Notification *Notification `json:"notification"`
}

type Notification struct {
	NotificationID     string `json:"notificationId"`
	DeviceID           string `json:"deviceId"`
	Username           string `json:"username"`
	Message            string `json:"message"`
	Lang               string `json:"lang"`
	NotificationStatus string `json:"notificationStatus"`
}

func Test_http_ListDevicesV1(t *testing.T) {
	runner.Run(t, "Test_http_ListDevicesV1", func(t provider.T) {
		t.Title("HTTP test for listing devices")
		t.Description("Sends the request, gets the lists of devices")
		t.WithNewStep("Testing ListDevicesV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Send the request")
			respGet, err := http.Get(baseurl + "/api/v1/devices?page=1&perPage=15")
			sCtx.Require().NoError(err)
			sCtx.Require().Equal(http.StatusOK, respGet.StatusCode)
			sCtx.WithNewAttachment("list response", allure.Text, []byte(fmt.Sprintf("%v", respGet)))
		})
	})
}

func Test_http_CreateDeviceV1(t *testing.T) {
	runner.Run(t, "Test_http_CreateDeviceV1", func(t provider.T) {
		t.Title("HTTP test for creating devices")
		t.Description("Marshals the data, creates the device and then checks it")
		t.WithNewStep("Testing CreateDeviceV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal")
			values := map[string]string{"platform": "Ios", "userId": "123123"}
			json_data, err := json.Marshal(values)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			sCtx.WithNewAttachment("Create request", allure.Text, []byte(fmt.Sprintf("%v", bytes.NewBuffer(json_data))))
			resp, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, resp.StatusCode)
			body, err := ioutil.ReadAll(resp.Body)
			sCtx.WithNewAttachment("list response", allure.Text, body)
			defer resp.Body.Close()

		})
	})
}

func Test_http_DescribeDeviceV1(t *testing.T) {
	runner.Run(t, "Test_http_DescribeDeviceV1", func(t provider.T) {
		t.WithNewStep("Testing DescribeDeviceV1", func(sCtx provider.StepCtx) {
			t.Title("HTTP test for creating devices")
			t.Description("Marshals the data, creates the device and then checks it")
			sCtx.NewStep("Preparing the data + Marshal")
			values := map[string]string{"platform": "TeslaOX", "userId": "145551"}
			json_data, err := json.Marshal(values)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Get the device")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			respGet, err := http.Get(baseurl + "/api/v1/devices/" + deviceCreated.DeviceID)
			sCtx.Require().Equal(http.StatusOK, respGet.StatusCode)
			sCtx.Require().NoError(err)
			deviceGot := new(Device)
			json.NewDecoder(respGet.Body).Decode(deviceGot)
			sCtx.Require().Equal(deviceGot.Platform, deviceCreated.Platform)
			sCtx.Require().Equal(deviceGot.UserId, deviceCreated.UserId)
		})
	})
}

func Test_http_DeleteDeviceV1(t *testing.T) {
	runner.Run(t, "Test_http_DeleteDeviceV1", func(t provider.T) {
		t.Title("HTTP test for creating devices")
		t.Description("Marshals the data, creates the device and then deletes it")
		t.WithNewStep("Testing DeleteDeviceV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal")
			values := map[string]string{"platform": "SuperOS", "userId": "172636"}
			json_data, err := json.Marshal(values)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Deleting the device")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			url := baseurl + "/api/v1/devices/" + deviceCreated.DeviceID
			req, err := http.NewRequest("DELETE", url, nil)
			sCtx.Require().NoError(err)
			respDelete, err := http.DefaultClient.Do(req)
			sCtx.Require().NoError(err)
			sCtx.Require().Equal(http.StatusOK, respDelete.StatusCode)

		})
	})
}

func Test_http_UpdateDeviceV1(t *testing.T) {
	runner.Run(t, "Test_http_UpdateDeviceV1", func(t provider.T) {
		t.Title("HTTP test for updating devices")
		t.Description("Marshals the data, creates the device and then updates it to then check")
		t.WithNewStep("Testing UpdateDevicesV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal (CREATE)")
			valuesCreate := map[string]string{"platform": "OzonOS", "userId": "133841"}
			json_dataCreate, err := json.Marshal(valuesCreate)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_dataCreate))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Preparing the data + Marshal (UPDATE)")
			valuesUpdate := map[string]string{"platform": "Ios", "userId": "123123"}
			json_dataUpdate, err := json.Marshal(valuesUpdate)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Update the device")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			url := baseurl + "/api/v1/devices/" + deviceCreated.DeviceID
			req, err := http.NewRequest("PUT", url, bytes.NewBuffer(json_dataUpdate))
			assert.NoError(t, err)
			respUpdate, err := http.DefaultClient.Do(req)
			assert.NoError(t, err)
			sCtx.Require().Equal(http.StatusOK, respUpdate.StatusCode)

		})
	})
}

func Test_http_SendNotifV1(t *testing.T) {
	runner.Run(t, "Test_http_SendNotifV1", func(t provider.T) {
		t.Title("HTTP test for sending notifications")
		t.Description("Marshals the data, creates the device and then sends a notification to it to then check")
		t.WithNewStep("Testing SendNotifV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal (CREATE)")
			valuesCreate := map[string]string{"platform": "TurboOS", "userId": "572631"}
			json_dataCreate, err := json.Marshal(valuesCreate)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_dataCreate))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Preparing the data + Marshal (SEND NOTIF)")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			valuesSendNotif := &AutoGenerated{&Notification{NotificationID: "0", DeviceID: deviceCreated.DeviceID, Username: "0", Message: "Hello", Lang: "LANG_ENGLISH", NotificationStatus: "STATUS_CREATED"}}
			json_data, err := json.Marshal(valuesSendNotif)
			assert.NoError(t, err)

			sCtx.NewStep("Send Notification")
			respSendNotif, err := http.Post(baseurl+"/api/v1/notification", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, respSendNotif.StatusCode)
			sentNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(sentNotif)

		})
	})
}

func Test_http_GetNotifications(t *testing.T) {
	runner.Run(t, "Test_http_GetNotifications", func(t provider.T) {
		t.Title("HTTP test for sending notifications")
		t.Description("Marshals the data, creates the device and then sends a notification, then gets it")
		t.WithNewStep("Testing GetNotifications", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal (CREATE)")
			valuesCreate := map[string]string{"platform": "DeltaOS", "userId": "682231"}
			json_dataCreate, err := json.Marshal(valuesCreate)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_dataCreate))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Preparing the data + Marshal (SEND NOTIF)")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			valuesSendNotif := &AutoGenerated{&Notification{NotificationID: "0", DeviceID: deviceCreated.DeviceID, Username: "0", Message: "Hello", Lang: "LANG_ENGLISH", NotificationStatus: "STATUS_CREATED"}}
			json_data, err := json.Marshal(valuesSendNotif)
			assert.NoError(t, err)

			sCtx.NewStep("Send Notification")
			respSendNotif, err := http.Post(baseurl+"/api/v1/notification", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, respSendNotif.StatusCode)
			sentNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(sentNotif)

			sCtx.NewStep("Get Notification")
			log.Print(sentNotif.DeviceID)
			respGetNotif, err := http.Get(baseurl + "/api/v1/notification?deviceId=" + deviceCreated.DeviceID)
			sCtx.Require().Equal(http.StatusOK, respGetNotif.StatusCode)
			gotNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(gotNotif)
		})
	})
}

func Test_http_AckNotifV1(t *testing.T) {
	runner.Run(t, "Test_http_AckNotifV1", func(t provider.T) {
		t.Title("HTTP test for acknowledging notifications deliveries")
		t.Description("Marshals the data, creates the device and sends a notification to it, then acknowledges the delivery")
		t.WithNewStep("Testing AckNotifV1", func(sCtx provider.StepCtx) {

			sCtx.NewStep("Preparing the data + Marshal (CREATE)")
			valuesCreate := map[string]string{"platform": "MegaOS", "userId": "777000"}
			json_dataCreate, err := json.Marshal(valuesCreate)
			sCtx.Require().NoError(err)

			sCtx.NewStep("Create the device")
			respCreate, err := http.Post(baseurl+"/api/v1/devices", "application/json", bytes.NewBuffer(json_dataCreate))
			sCtx.Require().Equal(http.StatusOK, respCreate.StatusCode)
			defer respCreate.Body.Close()

			sCtx.NewStep("Preparing the data + Marshal (SEND NOTIF)")
			deviceCreated := new(Device)
			json.NewDecoder(respCreate.Body).Decode(deviceCreated)
			valuesSendNotif := &AutoGenerated{&Notification{NotificationID: "0", DeviceID: deviceCreated.DeviceID, Username: "0", Message: "Hello", Lang: "LANG_ENGLISH", NotificationStatus: "STATUS_CREATED"}}
			json_data, err := json.Marshal(valuesSendNotif)
			assert.NoError(t, err)

			sCtx.NewStep("Send Notification")
			respSendNotif, err := http.Post(baseurl+"/api/v1/notification", "application/json", bytes.NewBuffer(json_data))
			sCtx.Require().Equal(http.StatusOK, respSendNotif.StatusCode)
			sentNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(sentNotif)

			sCtx.NewStep("Ack Notification")
			log.Print(sentNotif.NotificationID)
			url := baseurl + "/api/v1/notification/ack/" + sentNotif.NotificationID
			req, err := http.NewRequest("PUT", url, nil)
			respAckNotif, err := http.DefaultClient.Do(req)
			sCtx.Require().Equal(http.StatusOK, respAckNotif.StatusCode)

			sCtx.NewStep("Get Notification")
			ackedNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(ackedNotif)
			respGetNotif, err := http.Get(baseurl + "/api/v1/notification?deviceId=" + deviceCreated.DeviceID)
			sCtx.Require().Equal(http.StatusOK, respGetNotif.StatusCode)
			gotNotif := new(Notification)
			json.NewDecoder(respSendNotif.Body).Decode(gotNotif)
			sCtx.Require().Equal(http.StatusOK, respAckNotif.StatusCode)
		})
	})
}
